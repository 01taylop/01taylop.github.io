{"version":3,"sourceRoot":"","sources":["../_sass/typography/_fonts.scss","../_sass/typography/_icons.scss","../_sass/base/_main.scss","../_sass/_theme.scss","../_sass/mixins/_all.scss","../_sass/base/_grid-layout.scss","../_sass/mixins/_media-queries.scss","../_sass/base/_grid-style.scss","../_sass/_helpers.scss"],"names":[],"mappings":"AACQ;ACDR;EAEE;EACA;EACA;EACA;EAEA;EACA;;AAMF;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;;;AAaE;EACE,SAXY;;;AAUd;EACE,SAXY;;;AAUd;EACE,SAXY;;;AAUd;EACE,SAXY;;;AAUd;EACE,SAXY;;;ACvBlB;EACE;;AACA;EACE;;;AAIJ;EACE;EACA;EACA;;;AAGF;EACE;EACA;;;AAGF;EACE;EACA;EACA;EACA;EACA;EAEA,OC9BY;ED+BZ;EACA,WC9BU;ED+BV;EACA,aC9BY;ED+BZ;EAEA;EACA;EACA;EACA;;AAEA;EE3BA,SF4BmB;EE3BnB;EACA;EF4BE;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;;;AGxDJ;EACE;EACA;EACA;EACA;EAEA;EACA;EACA;EACA,qBACA;;AC2CA;EDrDF;IAkBI;IACA,qBACA;;;ACiCF;EDrDF;IA2BI;IACA,qBACA;;;ACwBF;EDrDF;IAkCI;IACA,qBACA;;;ACiBF;EDrDF;IAyCI;IACA;;;;AEvCF;EACE;EACA;EACA,kBJFS;;AIIT;EACE,OJXQ;EIYR,aJXQ;;AIcV;EACE;EACA;;AAGF;EHZF;EACA;EGaI;EACA;EACA;EACA;EACA;EACA;;AACA;EHPJ,SADsB;EAEtB,UAFwC;EAGxC,SAH4D;EGUtD;EACA;EACA;EACA;EACA;EACA,kBJnCM;EIoCN;;ADmBN;ECnCE;IHZF;IACA;IGgCM;IACA;;;AAIJ;EHtCF;EACA;EGuCI;EACA;;AAGF;EH5CF;EACA;EG6CI;EACA;;AAGF;EACE;;AACA;EH7CJ,SG8CuB;EH7CvB;EACA;EG6CM;;AAIJ;EACE;;AAGF;EACE;;AAGF;EACE;;ADpBJ;ECsBM;IHrEN;IACA;IGsEQ;;;AAIN;EACE;;AACA;EHtEJ,SGuEuB;EHtEvB;EACA;EGsEM;EACA;;AAGJ;EACE;;AAEF;EACE;;AAEF;EACE;;AACA;EACE;EACA;EACA;EACA;EACA;EACA;;ADlDN;EC4CI;IAQI;IACA;IACA;;;AAIN;EACE;;AAEF;EACE;;AAEA;EACE;EACA;EACA;EACA;EACA;;AAEA;EACE;EACA;;AAGF;EH3HN;EACA;EG4HQ;EACA;EACA;;ADhFR;ECgEI;IAoBI;IACA;;EACA;IACE;;;ADvFV;ECgEI;IA2BI;IACA;;EACA;IACE;;;AD9FV;ECgEI;IAkCI;IACA;;EACA;IACE;;;AAKR;EACE;;;AChKN;EJaE,SIZiB;EJajB;EACA;;;AIXF;EACE;EACA;EACA;EACA;EACA;EACA","sourcesContent":["// sass-lint:disable no-url-domains no-url-protocols\n@import url('https://fonts.googleapis.com/css?family=Comfortaa:600|Montserrat&display=swap');\n","@font-face {\n  // sass-lint:disable no-duplicate-properties\n  font-family: 'portfolio';\n  font-style: normal;\n  font-weight: normal;\n  font-display: block;\n\n  src: url('../../fonts/portfolio/portfolio.eot?dga1cg');\n  src: url('../../fonts/portfolio/portfolio.eot?dga1cg#iefix') format('embedded-opentype'),\n  url('../../fonts/portfolio/portfolio.ttf?dga1cg') format('truetype'),\n  url('../../fonts/portfolio/portfolio.woff?dga1cg') format('woff'),\n  url('../../fonts/portfolio/portfolio.svg?dga1cg#portfolio') format('svg');\n}\n\n[class^='icon-'], [class*=' icon-'] {\n  font-family: 'portfolio' !important;\n  font-style: normal;\n  font-variant: normal;\n  font-weight: normal;\n  line-height: 1;\n  text-transform: none;\n  speak: none;\n  user-select: none;\n\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n$portfolio-icons: (\n  instagram: '\\ea92',\n  twitter: '\\ea96',\n  github: '\\eab0',\n  linkedin: '\\eac9',\n  stackoverflow: '\\ead0',\n);\n\n@each $key, $value in $portfolio-icons {\n  .icon-#{$key} {\n    &::before {\n      content: $value;\n    }\n  }\n}\n","//sass-lint:disable no-color-literals, no-disallowed-properties\n\n@use '../mixins/_all' as *;\n@use '../_theme' as *;\n\n* {\n  box-sizing: inherit;\n  &::before, &::after {\n    box-sizing: inherit;\n  }\n}\n\nhtml, body {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  box-sizing: border-box;\n  -webkit-text-size-adjust: 100%;\n}\n\nbody {\n  width: 100vw;\n  min-width: 300px;\n  min-height: 100vh;\n  background: linear-gradient(#333, #333);\n  background-color: #f8f8f8;\n\n  color: $font-colour;\n  font-family: 'Montserrat', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n  font-size: $font-size;\n  font-weight: normal;\n  line-height: $line-height;\n  font-display: swap;\n\n  -webkit-overflow-scrolling: touch;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  &::after {\n    @include opacity(.8);\n\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n\n    background-size: 400vw 400vh;\n    content: '';\n    z-index: -1;\n\n    -webkit-animation: gradient 60s ease infinite;\n    -moz-animation: gradient 60s ease infinite;\n    animation: gradient 60s ease infinite;\n  }\n}\n","$font-colour: #fff;\n$font-shadow: 0 1px 0 rgba(0, 0, 0, .1);\n$font-size: 16px;\n\n$line-height: 20px;\n\n$section-bg: rgba(0, 0, 0, .1);\n","@use \"sass:math\";\n\n@use './_sass-helpers' as *;\n\n@mixin font-size-rem($pixels) {\n  // sass-lint:disable no-disallowed-properties, no-duplicate-properties\n  $value: strip-unit($pixels);\n\n  font-size: $value + px;\n  font-size: math.div($value, 16) + rem;\n}\n\n@mixin opacity($opacity) {\n  $opacity-ie: $opacity * 100;\n\n  opacity: $opacity;\n  filter: alpha(opacity=$opacity-ie);\n  zoom: 1;\n}\n\n@mixin pseudo($display: block, $position: absolute, $content: '') {\n  display: $display;\n  position: $position;\n  content: $content;\n}\n","@use '../mixins/_media-queries' as *;\n\n.grid {\n  display: grid;\n  max-width: 1500px;\n  margin: 0 auto;\n  padding: 16px;\n\n  grid-gap: 16px;\n  grid-template-rows: auto;\n  grid-template-columns: 1fr;\n  grid-template-areas:\n  'header'\n  'work'\n  'about'\n  'skills'\n  'social'\n  'contact';\n\n  @include media('screen', '>=small') {\n    grid-template-columns: repeat(2, 1fr);\n    grid-template-areas:\n    'header header'\n    'work work'\n    'about about'\n    'skills social'\n    'contact contact';\n  }\n  @include media('screen', '>=medium') {\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-areas:\n    'header header work'\n    'about about about'\n    'skills social contact';\n  }\n  @include media('screen', '>=large') {\n    grid-template-columns: repeat(8, 1fr);\n    grid-template-areas:\n    'header header header header header work work work'\n    'about about about about skills skills social social'\n    'about about about about skills skills contact contact';\n  }\n  @include media('screen', '>=xlarge') {\n    padding: 24px;\n    grid-gap: 24px;\n  }\n}\n","@use \"sass:list\";\n@use \"sass:math\";\n@use \"sass:meta\";\n@use \"sass:map\";\n@use \"sass:string\";\n\n//\n// Media Queries\n// https://css-tricks.com/approaches-media-queries-sass/\n// --------------------------------------------------\n\n$breakpoints: (\n  'small': 500px,\n  'medium': 900px,\n  'large': 1100px,\n  'xlarge': 2000px,\n) !default;\n\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'retina2x': (\n    '(-webkit-min-device-pixel-ratio: 2)',\n    '(min-resolution: 192dpi)'\n  ),\n  'retina3x': (\n    '(-webkit-min-device-pixel-ratio: 3)',\n    '(min-resolution: 350dpi)'\n  )\n) !default;\n\n$unit-intervals: (\n  'px': 1,\n  'em': .01,\n  'rem': .1\n) !default;\n\n// Generates a media query based on a list of conditions\n@mixin media($conditions...) {\n  @for $i from 1 through list.length($conditions) {\n    $conditions: list.set-nth($conditions, $i, parse-expression(list.nth($conditions, $i)));\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: '';\n\n  @each $branch in $branches {\n    @if (string.length($query) != 0) {\n      $query: $query + ', ';\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n// Reads a list of media query expressions and separates logical disjunctions into different branches\n@function get-query-branches($expressions) {\n  $result: '';\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (string.length($result) != 0) {\n      $result: $result + ' and ';\n    }\n\n    @if (meta.type-of($expression) == 'string') {\n      $result: $result + $expression;\n    } @else if (meta.type-of($expression) == 'list') {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (meta.type-of($expression) == 'list') {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join($result, str-replace-first($first, $member, $partial));\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n// Parses a string to form a media query expression\n@function parse-expression($expression) {\n  $operator: '';\n  $value: '';\n  $element: '';\n  $result: '';\n  $is-width: true;\n\n  @if (meta.type-of($expression) != 'string') {\n    @warn 'Expression with type `#{meta.type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (string.slice($expression, 2, 2) == '=') {\n    $operator: string.slice($expression, 1, 2);\n    $value: string.slice($expression, 3);\n  } @else {\n    $operator: string.slice($expression, 1, 1);\n    $value: string.slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map.has-key($breakpoints, $value) {\n    $result: map.get($breakpoints, $value);\n  } @else if map.has-key($media-expressions, $expression) {\n    $result: map.get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: string.to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: math.unit($result);\n    $interval: 0;\n\n    @if (map.has-key($unit-intervals, $unit)) {\n      $interval: map.get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == '>') {\n      $element: '(min-width: #{$result + $interval})';\n    } @else if ($operator == '<') {\n      $element: '(max-width: #{$result - $interval})';\n    } @else if ($operator == '>=') {\n      $element: '(min-width: #{$result})';\n    } @else if ($operator == '<=') {\n      $element: '(max-width: #{$result})';\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n// Replaces the first occurence of the string with the replacement string\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n// Casts a number to a string\n@function to-number($string) {\n  // Matrices\n  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';\n  $numbers:  0   1   2   3   4   5   6   7   8   9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n    @if $character == '-' {\n      $minus: true;\n    } @else if $character == '.' {\n      $divider: 1;\n    } @else {\n      @if type-of($index) != 'number' {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      } @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';\n  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != 'number' {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n","@use '../mixins/_all' as *;\n@use '../mixins/_media-queries' as *;\n@use '../_theme' as *;\n\n.grid {\n  section {\n    padding: 16px;\n    border-radius: 12px;\n    background-color: $section-bg;\n\n    h1, h2, p, a {\n      color: $font-colour;\n      text-shadow: $font-shadow;\n    }\n\n    h1, h2 {\n      font-family: 'Comfortaa', sans-serif;\n      font-weight: 600;\n    }\n\n    h1 {\n      @include font-size-rem(28px);\n      display: inline-block;\n      position: relative;\n      margin: 0 0 20px;\n      padding-right: 5px;\n      line-height: 32px;\n      speak: none;\n      &::after {\n        @include pseudo;\n        top: 0;\n        right: -2px;\n        width: 3px;\n        height: 1em;\n        border-radius: 2px;\n        background-color: $font-colour;\n        animation: blink-caret 1.2s step-end infinite;\n      }\n\n      @include media('screen', '>=small') {\n        @include font-size-rem(34px);\n        margin: 0 0 26px;\n        line-height: 38px;\n      }\n    }\n\n    h2 {\n      @include font-size-rem(26px);\n      margin: 0 0 10px;\n      line-height: 34px;\n    }\n\n    p {\n      @include font-size-rem(16px);\n      margin: 0 0 10px;\n      line-height: 24px;\n    }\n\n    a {\n      transition: opacity .2s ease;\n      &:hover {\n        @include opacity(.6);\n        cursor: pointer;\n      }\n    }\n\n    img {\n      max-width: 100%;\n    }\n\n    *:last-child {\n      margin-bottom: 0;\n    }\n\n    &.item-header {\n      grid-area: header;\n      @include media('screen', '>=small') {\n        h1 + p {\n          @include font-size-rem(20px);\n          line-height: 32px;\n        }\n      }\n    }\n    &.item-work {\n      grid-area: work;\n      img {\n        @include opacity(.8);\n        width: 140px;\n        margin-top: 10px;\n      }\n    }\n    &.item-london {\n      grid-area: london;\n    }\n    &.item-wfb {\n      grid-area: wfb;\n    }\n    &.item-about {\n      grid-area: about;\n      img {\n        display: block;\n        width: 200px;\n        height: 200px;\n        margin: 0 auto 10px;\n        float: none;\n        border-radius: 50%;\n        @include media('screen', '>=small') {\n          display: inline-block;\n          margin: 0 20px 10px 0;\n          float: left;\n        }\n      }\n    }\n    &.item-skills {\n      grid-area: skills;\n    }\n    &.item-social {\n      grid-area: social;\n\n      .social {\n        display: grid;\n        width: 100%;\n        height: 100%;\n        grid-template-columns: 1fr 1fr 1fr 1fr;\n        grid-template-rows: auto 1fr;\n\n        h2 {\n          grid-column: 1 / 5;\n          place-self: start;\n        }\n\n        a {\n          @include font-size-rem(30px);\n          padding: 10px;\n          text-decoration: none;\n          place-self: center;\n        }\n\n        @include media('screen', '>=small') {\n          grid-template-columns: 1fr 1fr;\n          grid-template-rows: auto 1fr 1fr;\n          h2 {\n            grid-column: 1 / 3;\n          }\n        }\n        @include media('screen', '>=medium') {\n          grid-template-columns: 1fr 1fr;\n          grid-template-rows: auto 1fr 1fr;\n          h2 {\n            grid-column: 1 / 3;\n          }\n        }\n        @include media('screen', '>=large') {\n          grid-template-columns: 1fr 1fr 1fr 1fr;\n          grid-template-rows: auto 1fr;\n          h2 {\n            grid-column: 1 / 5;\n          }\n        }\n      }\n    }\n    &.item-contact {\n      grid-area: contact;\n    }\n  }\n}\n","@use './mixins/_all' as *;\n\n.comment {\n  @include opacity(.8);\n}\n\n.visually-hidden {\n  position: absolute !important;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px); // sass-lint:disable-line no-duplicate-properties\n}\n"],"file":"main.css"}